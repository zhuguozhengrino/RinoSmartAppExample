//
//  RCTVLCVideoManager.m
//  react-native-video
//
//  Created by super on 2023/8/14.
//

#import "RCTVLCVideoManager.h"
#import <IJKMediaFramework/IJKMediaFramework.h>
#import <React/RCTConvert.h>
#import "RCTVideo.h"
#import <React/RCTBridgeModule.h>
#import <React/RCTEventDispatcher.h>
#import <React/UIView+React.h>
#import <AVFoundation/AVFoundation.h>

@interface RCTVLCVideoManager ()


@property (nonatomic , assign) BOOL isSend;

@property (nonatomic , strong) IJKFFMoviePlayerController *player;
@property (nonatomic , strong) RCTVideo *videoView;

@property (nonatomic , assign) BOOL useVlC;

@property (nonatomic , copy)NSString *vlcUrl;

@property (nonatomic , assign) NSInteger totalTime;

@property (nonatomic , assign)NSInteger currentTime;


@property (nonatomic , strong) NSTimer *playerTimer;
@end
static id VLCVideoSharedInstance;
static dispatch_once_t VLCVideoOnceToken;
@implementation RCTVLCVideoManager


-(IJKFFMoviePlayerController *)player{
    if(_player == nil && self.vlcUrl.length > 0){
        NSURL *url = [NSURL URLWithString:self.vlcUrl];
        [IJKFFMoviePlayerController setLogReport:YES];
        [IJKFFMoviePlayerController setLogLevel:k_IJK_LOG_INFO];
        [IJKFFMoviePlayerController checkIfFFmpegVersionMatch:YES];
        IJKFFOptions *options = [IJKFFOptions optionsByDefault];

        _player = [[IJKFFMoviePlayerController alloc] initWithContentURL:url withOptions:options];
        [_player setScalingMode:IJKMPMovieScalingModeAspectFit];
        
        _player.view.frame = self.videoView.frame;
        _player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
        [self.videoView addSubview:self.player.view];
        
        
    }
    return _player;
}


- (void)setSrc:(NSDictionary *)source view:(RCTVideo *)videoView{
    if([videoView.useCustom isEqualToString:@"true"]){
        self.useVlC = YES;
    }
    if(self.useVlC){
        
        [self removePlayer];
        self.isSend = NO;
        self.totalTime = 0;
        self.currentTime = 0;
        [self.playerTimer invalidate];
        self.playerTimer = nil;
        self.vlcUrl = [source objectForKey:@"uri"];
        NSLog(@"--IJKFF-rn--设置资源：%@",self.vlcUrl);
        self.videoView = videoView;
        [self.player pause];
        [self updateSetValue];
        
        [self.player prepareToPlay];
        if (self.videoView.onVideoLoadStart) {
            self.videoView.onVideoLoadStart(@{});
        }
        
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(playerPlaybackStateDidChange:)
                                                     name:IJKMPMoviePlayerPlaybackStateDidChangeNotification
                                                   object:nil];
        // 添加播放完成通知的观察者
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                     selector:@selector(moviePlayerPlaybackDidFinish:)
                                                         name:IJKMPMoviePlayerPlaybackDidFinishNotification
                                                       object:self.player];
        
    }
    
}





-(void)pause{
    if(self.player && self.useVlC){
        [self.player pause];
    }
    
}

-(void)play{
    if(self.player && self.useVlC){
        [self.player play];
        self.player.playbackRate = 0;
    }
    
}
-(void)stop{
    if(self.player && self.useVlC){
        [self.player stop];
    }
    
    
}
-(void)setMuted:(BOOL)muted{
    _muted = muted;
    
    if(self.player && self.useVlC){
        [self updateSetValue];
    }
}

-(void)setVolume:(CGFloat)volume{
    _volume = 2;
    if(self.player && self.useVlC){
        [self updateSetValue];
    }
}

-(void)updateSetValue{
//    [self.player setPlaybackVolume:_volume];
}
- (void)setSeek:(NSDictionary *)info{
    NSLog(@"--IJKFF----Seek");
    if(self.player && self.useVlC){
        NSNumber *seekTime = info[@"time"];
        NSNumber *seekTolerance = info[@"tolerance"];
        self.currentTime = [seekTime integerValue];
        if(self.totalTime > 0){
            self.player.currentPlaybackTime = self.currentTime;
            [self.player play];
            [self playStartTimer];
        }
        
    }
}
-(void)setRate:(float)rate{
    if(self.player && self.useVlC){
        self.player.playbackRate = rate;
    }
    
}

-(void)removePlayer{
    
    if(_player){
        NSLog(@"--IJKFF--removePlayer");
//        [_player setPlaybackVolume:0];
        [_player shutdown];
        [_player stop];
        _player.playbackRate = 0;
        // 移除观察者
        [[NSNotificationCenter defaultCenter] removeObserver:self name:IJKMPMoviePlayerPlaybackDidFinishNotification object:self.player];
        [[NSNotificationCenter defaultCenter] removeObserver:self name:IJKMPMoviePlayerPlaybackStateDidChangeNotification object:self.player];
        // 移除播放器视图
        [self.player.view removeFromSuperview];
        _player = nil;
        
        self.currentTime = 0;
        [_playerTimer invalidate];
        _playerTimer = nil;
    }
    
}

- (void)moviePlayerPlaybackDidFinish:(NSNotification *)notification {
    // 播放完成后的处理逻辑
    // 你可以根据需要获取通知中的相关信息
    NSDictionary *userInfo = notification.userInfo;
    IJKMPMovieFinishReason reason = [[userInfo valueForKey:IJKMPMoviePlayerPlaybackDidFinishReasonUserInfoKey] intValue];
    
    if (reason == IJKMPMovieFinishReasonPlaybackEnded) {
        // 正常播放结束
        NSLog(@"--IJKFF--正常播放结束");
        self.currentTime = 0;
        [_playerTimer invalidate];
        _playerTimer = nil;
        self.videoView.onVideoEnd(@{});
    } else if (reason == IJKMPMovieFinishReasonUserExited) {
        // 用户退出
        NSLog(@"--IJKFF--用户退出");
        self.videoView.onVideoEnd(@{});
        self.currentTime = 0;
        [_playerTimer invalidate];
        _playerTimer = nil;
    } else if (reason == IJKMPMovieFinishReasonPlaybackError) {
        // 播放错误
        NSLog(@"--IJKFF--播放错误");
    }
}



- (void)playerPlaybackStateDidChange:(NSNotification *)notification {
    
    switch (self.player.playbackState) {
        case IJKMPMoviePlaybackStateStopped:
            // 播放停止
            NSLog(@"--IJKFF--播放停止");
            self.videoView.onVideoEnd(@{});
            self.currentTime = 0;
            [_playerTimer invalidate];
            _playerTimer = nil;
            break;
        case IJKMPMoviePlaybackStatePlaying:
            // 播放中
//            NSLog(@"--IJKFF--播放中");
            
            self.totalTime = self.player.duration;
            self.currentTime = (NSInteger)self.player.currentPlaybackTime;
//            NSLog(@"--IJKFF--totalTime:%zd",self.totalTime);
            
            if([self.delegate respondsToSelector:@selector(RCTVLCMediaPlayerTimeChanged:)] && !self.isSend){
                self.isSend = YES;
                NSDictionary *dict = @{@"duration":@(self.totalTime)};
                [self.delegate RCTVLCMediaPlayerTimeChanged:dict];
            }
            
            [self playStartTimer];
            break;
        case IJKMPMoviePlaybackStatePaused:
            // 暂停
//            NSLog(@"--IJKFF--暂停");
            break;
        case IJKMPMoviePlaybackStateInterrupted:
            // 播放被中断
            NSLog(@"--IJKFF--播放被中断");
            break;
        case IJKMPMoviePlaybackStateSeekingForward:
            //正在快进
//            NSLog(@"--IJKFF--正在快进");
            break;
        case IJKMPMoviePlaybackStateSeekingBackward:
            // 正在快退
//            NSLog(@"--IJKFF--正在快退");
            break;
        default:
            break;
    }
}

-(void)playStartTimer{
    if(!_playerTimer){
        self.playerTimer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(playTimeChange) userInfo:nil repeats:YES];
    }
    
}


-(void)playTimeChange{
    if(self.player.playbackState == IJKMPMoviePlaybackStatePlaying && self.useVlC){
        self.currentTime ++;
//        NSLog(@"--IJKFF--progress:%zd--duration:%zd",self.currentTime,self.totalTime);
        [[NSNotificationCenter defaultCenter] postNotificationName:@"RCTVideo_progress" object:nil userInfo:@{@"progress": [NSNumber numberWithDouble: self.currentTime / self.totalTime]}];
        
        if( self.player.currentPlaybackTime >= 0 ) {
            NSDictionary *progressDict = @{
                @"currentTime": @(self.currentTime),
                @"playableDuration": @(self.totalTime)
            };
            NSLog(@"--IJKFF-progress--currentTime:%zd--totalTime:%zd",self.currentTime,self.totalTime);
            self.videoView.onVideoProgress(progressDict);
        }
    }
    
}
@end
